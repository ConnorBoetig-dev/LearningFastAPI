# =============================================================================================
# DOCKER-COMPOSE.YML — THE ORCHESTRATOR (starts both containers + wiring)
# =============================================================================================
# What this file does:
# 1) Defines the services (containers) to run: MinIO (storage) + API (FastAPI app)
# 2) Sets up a private network so services can talk by name (e.g., http://minio:9000)
# 3) Maps container ports to your host so your browser can reach them
# 4) Feeds environment variables from .env into the containers
# =============================================================================================

services:
  # -------------------------
  # SERVICE 1: Storage server (S3-compatible)
  # -------------------------
  # MinIO is a local replacement for S3. Your app will PUT/GET files here via the S3 API.
  minio:
    image: quay.io/minio/minio:latest        # We PULL a prebuilt image (no Dockerfile needed)
    container_name: minio
    ports:
      - "9000:9000"  # host:container — S3 API endpoint (SDKs talk here)
      - "9001:9001"  # host:container — Web console (browse to http://localhost:9001)
    environment:
      # These are defined in .env at the project root.
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    # Start the MinIO server and bind the admin console to :9001
    command: server /data --console-address ":9001"
    volumes:
      # Named volume so objects persist even if the container is recreated.
      - minio-data:/data

  # -------------------------
  # SERVICE 2: Your FastAPI application (the API)
  # -------------------------
  api:
    build:
      # IMPORTANT: Use the PROJECT ROOT as the build context so the Dockerfile
      # can "see" BOTH backend/ (Dockerfile, requirements.txt) and app/ (your code).
      context: .
      # Tell Docker exactly which Dockerfile to use.
      dockerfile: backend/Dockerfile
    container_name: fastapi
    # Load ALL key=value pairs from .env into this container's environment.
    env_file: .env
    ports:
      - "8000:8000"  # host:container — browse to http://localhost:8000
    depends_on:
      - minio        # Start MinIO first (the API will need it soon)
    volumes:
      # DEV HOT-RELOAD: show the container your live source code.
      # host ./app  -> container /app/app   (matches paths used in the Dockerfile/uvicorn)
      - ./app:/app/app
    # Run the ASGI server. "app.main:app" == import app from app/main.py
    # --reload auto-restarts on file changes (dev only).
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

# -------------------------
# VOLUMES (persistent data managed by Docker)
# -------------------------
volumes:
  minio-data:
